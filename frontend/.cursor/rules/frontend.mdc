---
description:
globs:
alwaysApply: false
---

# Summeryme.ai Flutter プロジェクト - Cursor ルール

## プロジェクト概要
- **プロジェクト名**: summeryme.ai
- **フレームワーク**: Flutter 3.7.2+
- **言語**: Dart
- **アーキテクチャ**: クロスプラットフォーム（iOS、Android、Web、Windows、macOS、Linux）
- **UI**: Material Design
- **状態管理**: Provider パターン

## コーディング規約

### 1. ファイル・ディレクトリ命名規則
- **ファイル名**: スネークケース（`article_detail_screen.dart`）
- **クラス名**: パスカルケース（`ArticleDetailScreen`）
- **変数・関数名**: キャメルケース（`articleTitle`、`fetchArticles()`）
- **定数**: スクリーミングスネークケース（`API_BASE_URL`）

### 2. ディレクトリ構造
```
lib/
├── main.dart              # エントリーポイント
├── models/                # データモデル
├── screens/               # UI画面
│   ├── auth/              # 認証関連
│   └── [feature]/         # 機能別サブディレクトリ
├── widgets/               # 再利用可能ウィジェット
├── services/              # API・外部サービス
├── providers/             # 状態管理
├── utils/                 # ユーティリティ
└── themes/                # テーマ・スタイル
```

### 3. インポート順序
```dart
// 1. Dart標準ライブラリ
import 'dart:io';
import 'dart:convert';

// 2. Flutterライブラリ
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

// 3. サードパーティパッケージ
import 'package:provider/provider.dart';
import 'package:http/http.dart';

// 4. プロジェクト内ファイル
import 'models/article.dart';
import 'screens/auth/login_screen.dart';
```

## コーディングベストプラクティス

### 1. ウィジェット設計
- **StatelessWidget** を優先的に使用
- **const コンストラクタ** を可能な限り使用
- **Key** パラメータを適切に設定
- **単一責任の原則** に従ってウィジェットを分割

```dart
class ArticleCard extends StatelessWidget {
  const ArticleCard({
    super.key,
    required this.article,
    this.onTap,
  });

  final Article article;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    // ウィジェット実装
  }
}
```

### 2. 状態管理
- **Provider** パターンを使用
- **ChangeNotifier** でビジネスロジックを管理
- **Consumer** と **Selector** を適切に使い分け

### 3. エラーハンドリング
- **try-catch** ブロックで例外処理
- **ユーザーフレンドリー** なエラーメッセージ
- **ログ出力** でデバッグ情報を記録

### 4. パフォーマンス最適化
- **ListView.builder** で大量データを効率的に表示
- **CachedNetworkImage** で画像キャッシュ
- **const** ウィジェットで不要な再ビルドを防止

## プラットフォーム対応

### 1. レスポンシブデザイン
- **MediaQuery** でスクリーンサイズを取得
- **LayoutBuilder** で動的レイアウト
- **Flexible** と **Expanded** で柔軟な配置

### 2. プラットフォーム固有の処理
```dart
import 'dart:io' show Platform;
import 'package:flutter/foundation.dart' show kIsWeb;

// プラットフォーム判定
if (kIsWeb) {
  // Web固有の処理
} else if (Platform.isIOS) {
  // iOS固有の処理
} else if (Platform.isAndroid) {
  // Android固有の処理
}
```

### 3. フォント設定
- **プラットフォーム別** の最適なシステムフォントを使用
- **アクセシビリティ** を考慮したフォントサイズ

## テーマとスタイリング

### 1. テーマ管理
- **AppTheme** クラスで一元管理
- **Material Design 3** の原則に従う
- **ダークモード** 対応を考慮

### 2. カラーパレット
- **一貫性** のあるカラースキーム
- **アクセシビリティ** を考慮したコントラスト比

## API通信とデータ管理

### 1. HTTP通信
- **http** パッケージを使用
- **非同期処理** で適切な `async/await`
- **エラーハンドリング** とタイムアウト設定

### 2. データ永続化
- **SharedPreferences** でローカル設定保存
- **適切なキー命名** でデータ管理

## テストとデバッグ

### 1. テスト戦略
- **ユニットテスト** でビジネスロジック検証
- **ウィジェットテスト** でUI動作確認
- **インテグレーションテスト** で全体フロー検証

### 2. デバッグ支援
- **debugShowCheckedModeBanner: false** で本番環境準備
- **適切なログ出力** でトラブルシューティング

## セキュリティ

### 1. 認証・認可
- **安全な認証フロー** の実装
- **トークン管理** の適切な実装
- **機密情報** の適切な保護

### 2. データ保護
- **入力値検証** でセキュリティ向上
- **HTTPS通信** の強制

## パフォーマンス

### 1. ビルド最適化
- **--release** フラグでプロダクションビルド
- **不要なデバッグ情報** の除去

### 2. メモリ管理
- **適切なリソース解放**
- **メモリリーク** の防止

## 開発ワークフロー

### 1. コード品質
- **flutter analyze** で静的解析
- **flutter_lints** ルールに従う
- **コードレビュー** での品質確保

### 2. バージョン管理
- **意味のあるコミットメッセージ**
- **機能別ブランチ** での開発

## 依存関係管理

### 現在の主要依存関係
- `http: ^1.1.0` - HTTP通信
- `cached_network_image: ^3.3.0` - 画像キャッシュ
- `shared_preferences: ^2.2.2` - ローカルストレージ
- `provider: ^6.1.1` - 状態管理
- `intl: ^0.19.0` - 国際化対応

### 依存関係追加時の注意点
- **最新安定版** を使用
- **互換性** の確認
- **pubspec.yaml** の適切な更新

## 国際化（i18n）

### 1. 多言語対応
- **intl** パッケージを活用
- **ARB ファイル** でメッセージ管理
- **プラットフォーム固有** のロケール対応

## アクセシビリティ

### 1. ユーザビリティ
- **Semantics** ウィジェットで支援技術対応
- **適切なコントラスト比**
- **タッチターゲット** の適切なサイズ

## 注意事項

### 1. 開発時の注意点
- **Hot Reload** を活用した効率的な開発
- **プラットフォーム固有** の制約を考慮
- **パフォーマンス** を常に意識

### 2. デプロイ前チェック
- **全プラットフォーム** でのテスト実行
- **リリースビルド** での動作確認
- **ストア申請** 要件の確認

このルールに従って、保守性が高く、スケーラブルで、ユーザーフレンドリーなFlutterアプリケーションを開発してください。