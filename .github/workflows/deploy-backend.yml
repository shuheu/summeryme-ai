name: 🚀 [Deploy] Backend to Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      run_migration:
        description: 'Run database migration after deployment'
        required: false
        default: true
        type: boolean

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'asia-northeast1' }}
  SERVICE_NAME: ${{ vars.GCP_SERVICE_NAME || 'backend-api' }}
  BACKEND_PREFIX: summeryme-ai/backend

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend_ts

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required variables
        run: |
          if [ -z "${{ env.PROJECT_ID }}" ]; then
            echo "❌ エラー: GCP_PROJECT_ID変数が設定されていません"
            echo "GitHub リポジトリの Variables で GCP_PROJECT_ID を設定してください"
            exit 1
          fi
          echo "✅ PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "✅ REGION: ${{ env.REGION }}"
          echo "✅ SERVICE_NAME: ${{ env.SERVICE_NAME }}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure gcloud project
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          echo "✅ gcloud project set to: $(gcloud config get-value project)"

      - name: Configure Docker for Artifact Registry
        run: |
          echo "🔧 Configuring Docker for Artifact Registry..."
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "REGION: ${{ env.REGION }}"

          # 変数の検証
          if [ -z "${{ env.REGION }}" ]; then
            echo "❌ エラー: REGION変数が設定されていません"
            exit 1
          fi

          REGISTRY_URL="${{ env.REGION }}-docker.pkg.dev"
          echo "Registry URL: ${REGISTRY_URL}"

          # Artifact Registryの認証設定
          gcloud auth configure-docker "${REGISTRY_URL}" --quiet

          # 設定の確認
          if gcloud auth list --filter="status:ACTIVE" --format="value(account)" | head -1 >/dev/null; then
            echo "✅ Docker configured for Artifact Registry"
          else
            echo "❌ エラー: Docker認証設定に失敗しました"
            exit 1
          fi

      - name: Verify Artifact Registry repository
        run: |
          if ! gcloud artifacts repositories describe backend --location=${{ env.REGION }} --project=${{ env.PROJECT_ID }} >/dev/null 2>&1; then
            echo "❌ エラー: Artifact Registryリポジトリ 'backend' が存在しません"
            echo "以下のコマンドで作成してください:"
            echo "  gcloud artifacts repositories create backend --repository-format=docker --location=${{ env.REGION }}"
            exit 1
          fi
          echo "✅ Artifact Registryリポジトリ 'backend' が存在します"

      - name: Build Docker image
        run: |
          echo "🔨 Building Docker image..."
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "REGION: ${{ env.REGION }}"
          echo "SHA: ${{ github.sha }}"

          # Docker イメージのビルド（1回のみ）
          docker build -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/backend/backend-api:${{ github.sha }}" .

          # latestタグを追加
          docker tag "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/backend/backend-api:${{ github.sha }}" "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/backend/backend-api:latest"

          echo "✅ Docker image built successfully with both tags"

      - name: Push Docker image
        run: |
          echo "📤 Pushing Docker images..."

          # Docker イメージのプッシュ
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/backend/backend-api:${{ github.sha }}"
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/backend/backend-api:latest"

          echo "✅ Docker images pushed successfully"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy with Terraform
        working-directory: ./terraform
        run: |
          # terraform.tfvarsを動的に作成
          cat > terraform.tfvars << EOF
          project_id      = "${{ env.PROJECT_ID }}"
          region          = "${{ env.REGION }}"
          environment     = "${{ github.event.inputs.environment || 'production' }}"
          container_image = "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/backend/backend-api:${{ github.sha }}"
          EOF

          # GCSバックエンドでTerraformを初期化
          echo "🔧 Initializing Terraform with GCS backend..."
          echo "Backend bucket: ${{ env.PROJECT_ID }}-terraform-state"
          echo "Backend prefix: ${{ env.BACKEND_PREFIX }}"

          terraform init \
            -backend-config="bucket=${{ env.PROJECT_ID }}-terraform-state" \
            -backend-config="prefix=${{ env.BACKEND_PREFIX }}"

          # Makeコマンドを使用してCloud RunサービスとJobを更新
          make init

          # Terraform初期化の確認
          if [ ! -d ".terraform" ]; then
            echo "❌ エラー: Terraform初期化に失敗しました"
            exit 1
          fi
          echo "✅ Terraform初期化完了"

          # 変更内容の確認
          echo "🔍 Cloud Runサービスの変更内容を確認中..."
          make plan-cloud-run

          echo "🔍 Cloud Run Jobの変更内容を確認中..."
          make plan-cloud-run-job

          # 変更の適用
          echo "🚀 Cloud Runサービスを更新中..."
          make apply-cloud-run

          echo "🚀 Cloud Run Jobを更新中..."
          make apply-cloud-run-job

      - name: Verify deployment
        working-directory: ./terraform
        run: |
          # Cloud Runサービスの状態確認
          if ! gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} >/dev/null 2>&1; then
            echo "❌ エラー: Cloud Runサービスのデプロイに失敗しました"
            exit 1
          fi
          echo "✅ Cloud Runサービスのデプロイ成功"

      - name: Run database migration
        if: ${{ github.event.inputs.run_migration == 'true' }}
        working-directory: ./terraform
        run: |
          echo "🔄 データベースマイグレーションを実行中..."
          make migrate

      - name: Get service URL
        id: get-url
        working-directory: ./
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> $GITHUB_OUTPUT
          echo "Service deployed to: $URL"

      - name: Health check
        working-directory: ./
        run: |
          echo "Performing health check..."
          sleep 30  # Wait for service to be ready
          curl -f ${{ steps.get-url.outputs.SERVICE_URL }}/health/basic || exit 1
          echo "Basic health check passed!"
          echo "Testing database health check..."
          curl -f ${{ steps.get-url.outputs.SERVICE_URL }}/health || echo "Database health check failed (this is expected if DB connection issues exist)"
          echo "Health check completed!"

      - name: Deployment summary
        working-directory: ./
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "📍 Environment: ${{ github.event.inputs.environment }}"
          echo "🌐 Service URL: ${{ steps.get-url.outputs.SERVICE_URL }}"
          echo "🔄 Migration: ${{ github.event.inputs.run_migration }}"
