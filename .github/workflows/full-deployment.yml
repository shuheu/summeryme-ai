name: Full Backend Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      deploy_infrastructure:
        description: 'Deploy infrastructure with Terraform'
        required: false
        default: false
        type: boolean
      run_migration:
        description: 'Run database migration'
        required: false
        default: true
        type: boolean

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'asia-northeast1' }}
  SERVICE_NAME: ${{ vars.GCP_SERVICE_NAME || 'backend-api' }}

jobs:
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_infrastructure == 'true' }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          project_id  = "${{ env.PROJECT_ID }}"
          region      = "${{ env.REGION }}"
          environment = "${{ github.event.inputs.environment }}"
          EOF

      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve

  application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [infrastructure]
    if: ${{ always() && (needs.infrastructure.result == 'success' || needs.infrastructure.result == 'skipped') }}
    defaults:
      run:
        working-directory: ./backend_ts

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests and linting
        env:
          ESLINT_USE_FLAT_CONFIG: false
        run: |
          pnpm lint
          pnpm format-check
          pnpm build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --source . \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --concurrency=100 \
            --min-instances=0 \
            --max-instances=10 \
            --timeout=900 \
            --set-env-vars="NODE_ENV=${{ github.event.inputs.environment }},LOG_LEVEL=info,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},GCP_REGION=${{ env.REGION }}" \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:summeryme-db \
            --set-secrets="DB_PASSWORD=db-password:latest" \
            --set-env-vars="DATABASE_URL=mysql://summeryme_user:\$${DB_PASSWORD}@localhost:3306/summeryme_production?socket=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:summeryme-db"

      - name: Run database migration
        if: ${{ github.event.inputs.run_migration == 'true' }}
        run: |
          echo "Running database migration..."
          gcloud run jobs execute migrate-job \
            --region=${{ env.REGION }} \
            --wait

      - name: Get service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          echo "Performing health check..."
          sleep 30
          curl -f ${{ steps.get-url.outputs.SERVICE_URL }}/health || exit 1
          echo "Health check passed!"

      - name: Deployment summary
        run: |
          echo "🚀 Full deployment completed successfully!"
          echo "📍 Environment: ${{ github.event.inputs.environment }}"
          echo "🏗️ Infrastructure: ${{ github.event.inputs.deploy_infrastructure }}"
          echo "🌐 Service URL: ${{ steps.get-url.outputs.SERVICE_URL }}"
          echo "🔄 Migration: ${{ github.event.inputs.run_migration }}"
