name: 🚀 [Deploy] Infrastructure with Terraform

on:
  push:
    branches:
      - main
      - 'feat/**' # TODO: test用
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      target:
        description: 'Terraform target (optional)'
        required: false
        type: string

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'asia-northeast1' }}
  TERRAFORM_VERSION: 1.6.0
  BACKEND_PREFIX: summeryme-ai/backend

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'plan' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          project_id      = "${{ env.PROJECT_ID }}"
          region          = "${{ env.REGION }}"
          environment     = "production"
          container_image = "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/backend/backend-api:latest"
          EOF

      - name: Terraform Init
        run: |
          echo "🔧 Initializing Terraform with GCS backend..."
          echo "Backend bucket: ${{ env.PROJECT_ID }}-terraform-state"
          echo "Backend prefix: ${{ env.BACKEND_PREFIX }}"

          # GCSバックエンドでTerraformを初期化
          terraform init \
            -backend-config="bucket=${{ env.PROJECT_ID }}-terraform-state" \
            -backend-config="prefix=${{ env.BACKEND_PREFIX }}"

          echo "✅ Terraform initialized with GCS backend"

      - name: 🔍 Setup and Run TFLint
        continue-on-error: true
        run: |
          echo "🔧 Setting up TFLint..."
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

          echo "🔍 Running TFLint..."
          tflint --init
          tflint --recursive || echo "⚠️ TFLint found issues (continuing for hackathon)"

          echo "✅ TFLint checks completed!"

      - name: 🔒 Setup and Run tfsec
        continue-on-error: true
        run: |
          echo "🔧 Setting up tfsec..."
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

          echo "🔒 Running security scan..."
          tfsec . --tfvars-file terraform.tfvars --format lovely || echo "⚠️ tfsec found security issues (continuing for hackathon)"

          echo "✅ Security scan completed!"

      - name: 📋 Setup and Run Checkov
        continue-on-error: true
        run: |
          echo "🔧 Setting up Checkov..."
          pip install checkov

          echo "📋 Running Checkov compliance checks..."
          checkov -d . --framework terraform --quiet || echo "⚠️ Checkov found compliance issues (continuing for hackathon)"

          echo "✅ Compliance checks completed!"

      - name: Terraform Validate
        run: |
          echo "✅ Validating Terraform configuration..."
          terraform validate

      - name: Terraform Format Check
        run: |
          echo "📝 Checking Terraform formatting..."
          terraform fmt -check

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == '' }}
        run: |
          echo "📋 Running Terraform plan..."
          if [ -n "${{ github.event.inputs.target }}" ]; then
            terraform plan -target="${{ github.event.inputs.target }}"
          else
            terraform plan
          fi

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "🚀 Applying Terraform changes..."
          if [ -n "${{ github.event.inputs.target }}" ]; then
            terraform apply -auto-approve -target="${{ github.event.inputs.target }}"
          else
            terraform apply -auto-approve
          fi

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          echo "🗑️ Destroying Terraform resources..."
          echo "⚠️ WARNING: This will destroy infrastructure!"
          if [ -n "${{ github.event.inputs.target }}" ]; then
            terraform destroy -auto-approve -target="${{ github.event.inputs.target }}"
          else
            terraform destroy -auto-approve
          fi

      - name: Terraform Output
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "📊 Terraform outputs:"
          terraform output

      - name: 📊 Upload Security Scan Results
        if: false # always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            terraform/tfsec-results.json
            terraform/checkov-results.json
          retention-days: 30
